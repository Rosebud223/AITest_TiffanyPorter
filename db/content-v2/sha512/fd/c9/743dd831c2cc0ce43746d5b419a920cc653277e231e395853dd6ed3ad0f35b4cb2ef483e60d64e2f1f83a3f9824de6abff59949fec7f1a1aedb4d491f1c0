{"_id":"com.unity.physics","name":"com.unity.physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","provider":"upm","versions":{"1.3.10":{"_upm":{"changelog":"### Fixed\n\n* Incorrect vertex orientation during baking process in `Unity.Physics.CapsuleCollider` where vertices were unexpectedly flipped in certain conditions.\n* Visual artifacts in `PhysicsDebugDisplay` where capsule edges were incorrectly rendered when Height < (2 * Radius).\n* Capsule edge stretching in `PhysicsDebugDisplay` that occurred with non-default height-to-radius ratios."},"unity":"2022.3","samples":[{"path":"Samples~/CustomPhysicsAuthoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.10","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.18","com.unity.entities":"1.3.10","com.unity.collections":"2.5.3","com.unity.mathematics":"1.3.2","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.5","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"4de5fe4feedee25f1a71eb4005e28d65fc6b8623","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.10.tgz"}},"1.3.9":{"_upm":{"changelog":"### Added\n\n* Added function `PhysicsVelocity.ApplyAngularImpulseWorldSpace` for applying angular impulse in world space\n\n### Changed\n\n* New ConfigurableJoint baking code that is capable of converting motors about all axes, not just X\n* ConfigurableJoint baking won't create empty UnityJoint (with no constraints) for unlocked linear and angular degrees of freedom\n\n### Fixed\n\n* The `Enable Integrity Checks` setting in the `Project Settings` under `Physics -> Unity Physics` now correctly reflects whether the integrity checks are enabled or disabled. Previously, the setting indicated the opposite."},"unity":"2022.3","samples":[{"path":"Samples~/CustomPhysicsAuthoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.9","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.18","com.unity.entities":"1.3.9","com.unity.collections":"2.5.2","com.unity.mathematics":"1.3.2","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.5","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"c7c1a8b1fcb47aeb8291d38e2182cdc818f6152f","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.9.tgz"}},"1.3.8":{"_upm":{"changelog":"### Removed\n\n* removing various material assets within unity/physics (PhysicsDynamicDebugMaterial.mat and Material.mat (HullGeneration scene)).\n\n### Fixed\n\n* Prevent collision instabilities with thin boxes through better choice of bevel radius when baking `Unity.Physics.BoxColliders` from built-in `BoxCollider` authoring components. Previously, the baked box could have collapsed to a quad due to excessive bevel radii, causing vibrations in the collision resolution.\n* Fixed an issue with collisions not getting re-enabled in Havok when deleting a joint that was disabling collisions between the affected rigid body pair."},"unity":"2022.3","samples":[{"path":"Samples~/CustomPhysicsAuthoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.8","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.18","com.unity.entities":"1.3.8","com.unity.collections":"2.5.1","com.unity.mathematics":"1.3.2","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.5","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"b42dcf5fc3adb132ef5bb62a114fbf070ca6c357","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.8.tgz"}},"1.3.5":{"_upm":{"changelog":"### Added\n\n* Motor Jacobians have access to the Jacobian header in the Solve methods now\n\n### Changed\n\n* Documentation updates\n* Updated Burst dependency to version 1.8.18\n* Updated Unity Test Framework dependency to version 1.4.5\n* Updated Mathematics dependency to version 1.3.2\n* Updated entities packages dependencies\n\n### Fixed\n\n* The \"Use Spring\" feature in the built-in `HingeJoint` now works correctly. Both the joint force values and the constraint relaxation parameters are set to the appropriate values in the underlying engine and the Unity Physics simulation behavior now closely matches the behavior in built-in physics.\n* Fixed a case that could lead to invalid data in the impulse handling within the LinearLimitJacobian\n* Limits in Hinge Joint authoring components, enabled via the \"Use Limits\" option, are now respected when the \"Use Spring\" option is also enabled."},"unity":"2022.3","samples":[{"path":"Samples~/CustomPhysicsAuthoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.5","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.18","com.unity.entities":"1.3.5","com.unity.collections":"2.5.1","com.unity.mathematics":"1.3.2","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.5","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"e087c68a3ab69707e84d7e39b6fb510c8a9de353","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.5.tgz"}},"1.3.2":{"_upm":{"changelog":"### Changed\n* Updated entities packages dependencies\n\n### Changed\n\n* Documentation updates\n* Updated Burst dependency to version 1.8.17\n* Updated Unity Test Framework dependency to version 1.4.5\n\n### Fixed\n\n* Fixed an issue with negative collider scales during baking. Negative scales in GameObjects are now correctly interpreted and can be used to correctly flip GameObjects together with their associated colliders."},"unity":"2022.3","upmCi":{"footprint":"70f9ba958b4d3f813986dc911a2e2969c8c57ac3"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"category":"Unity","repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"921920e681054c59b440cc1e2aef10f781dc4124"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.2","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.17","com.unity.entities":"1.3.2","com.unity.collections":"2.5.1","com.unity.mathematics":"1.3.2","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.5","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"5ee9a9ca3bec48d2e2a082e6541d6a87903547e8","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.2.tgz"}},"1.2.4":{"_upm":{"changelog":"### Changed\n\n* Updated entities packages dependencies"},"type":"asset","unity":"2022.3","upmCi":{"footprint":"a09305016d057afdfa24802e4473d9940828f3a8"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"3229c084d74b90980f151fe926f426ae38a63b44"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.4","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.13","com.unity.entities":"1.2.4","com.unity.collections":"2.4.3","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"09b3ff0b758b900a87b078026be7e03d0022288a","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.4.tgz"}},"1.3.0-pre.4":{"_upm":{"changelog":"### Added\n\n* The collision tolerance in the `CollisionWorld`, which defines the minimum distance required for creating contacts between rigid bodies, is now configurable. The default value has been changed to a smaller, more performant value of 0.01 meters. If you observe any tunneling issues in your use case, please increase the value via the `PhysicsStepAuthoring` component.\n\n### Changed\n\n* Updated Burst dependency to version 1.8.16\n\n### Fixed\n\n* Prevent `Entity.Null` entries in the `PhysicsColliderKeyEntityPair` buffer of rigid body entities with compound colliders."},"type":"assets","unity":"2022.3","upmCi":{"footprint":"fcf8c3b887682c99f01b66000bb5fdaef92730d4"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"6b0c8d27a0224c9cf76032c48d1b981e9750f10d"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.0-pre.4","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.16","com.unity.entities":"1.3.0-pre.4","com.unity.collections":"2.5.0-pre.2","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"62abba4346b5f2363f8cfff3d6ec8e1cd2e5ff6d","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.0-pre.4.tgz"}},"1.3.0-exp.1":{"_upm":{"changelog":"### Added\n\n* Motors authored via built-in component, api, or custom component now use spring frequency and the damping ratio to fine-tune the motor behaviour.\n* New `Collider.BakeTransform` function which allows deforming a collider at runtime. This function is implemented for all collider types except the `TerrainCollider` and applies a provided affine transformation to the collider geometry, rotating, translating, scaling and shearing it accordingly. The geometric transformation will be either perfect for mesh types, or approximate for primitives. Specific deformations will be perfect even for primitives depending on the type of deformation and the primitive's parametrization. As such a `BoxCollider` with identity orientation in local space will be uniformly scaled, updating its width, height and length perfectly, if the provided affine transformation is a pure scaling matrix.\n* The broadphase can now be changed to operate incrementally using the `PhysicsStepAuthoring` component (see parameters `Incremental Dynamic Broadphase` and `Incremental Static Broadphase`), and the `PhysicsStep` Entities components. When the feature is enabled, the bounding volume hierarchy inside the broadphase, used for spatial acceleration during collision detection and for collider queries such as ray and collider casts, is no longer built from scratch every frame, but incrementally updated from one frame to the next. This can lead to drastic performance improvements for scenes with large numbers of rigid bodies of which only a very small subset changes between frames, that is, changes to rigid body transformations or colliders are rare. This feature can be enabled for dynamic bodies and static bodies separately, which makes it applicable to large and mostly static worlds with massive numbers of static rigid bodies and a reasonable number of dynamic bodies. By default this feature is disabled.\n* Through the new `CompoundCollider.Update` function, the shape or transformation of children in a compound collider can now be safely modified. By calling the provided function, the compound collider's bounding volume information and optionally also its mass properties are updated in accordance with the modifications of its child colliders, thereby ensuring correct behavior in collision detection and collider queries.\n* Added a new `CollisionWorld.Clone()` function which allows cloning a collision world and deep copying select colliders which otherwise would be shared across clones. Deep copying is important in cases where the collision world clone is used over multiple frames and colliders are modified, which is frequently the case in Netcode environments with lag compensation for physics queries (see `Unity.NetCode.PhysicsWorldHistorySingleton`). For these cases, the colliders which are likely to be modified or deleted (such as colliders in dynamic rigid bodies) can now be deep copied, ensuring independent collision world clones. Without deep copying in these cases, modifying colliders in the original collision world after having cloned it will inadvertently also affect the clone, which can lead to erroneous collision queries and crashes.\n* By setting the \"Provides Contacts\" option in built-in collider authoring components, users can now enable collision event reporting for physically simulated rigid bodies. The collision events can be received by using an `ICollisionEventsJob`.\n\n### Changed\n\n* When baking a built-in hinge joint as a rotation motor, the Joint.Motor.Force parameter must be non-zero. This value is baked into the maximum impulse of the motor.\n* Add missing `[BurstCompile]` attributes in the collider blob systems to ensure maximum performance.\n* In `EnsureUniqueColliderBlobSystem`, prevent extra delay in adding the required unique collider blob cleanup components by using a different ECB system. This change also batches the corresponding commands with the commands coming from other physics systems, preventing an unnecessary extra sync point in the overall simulation.\n\n### Fixed\n\n* Possible race condition in debug displays when modifying the geometry of colliders.\n* Prevent unnecessary memory allocations in builds due to the editor-only debug display.\n* Fixed errors caused by memory corruption when selecting mesh-based custom Physics Shape Authoring components in the editor.\n* Prevent slowdowns caused by physics analytics data gathering through job parallelization and by disabling the analytics jobs when editor analytics are disabled.\n* Prevent crash in debug display caused by dangling system pointer in certain cases.\n* Fully remove any trace of the integrity checks unless we are in the editor or in a development build.\n* Fixed an issue that prevented contacts in the Physics Debug Display to show up when Draw Contacts was enabled."},"type":"assets","unity":"2022.3","upmCi":{"footprint":"98432d379186439eb78a0ab07460708462b51de4"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"d5bde5f043ad76defc80bbc6be1f8630d14b108d"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/index.html","name":"com.unity.physics","version":"1.3.0-exp.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.13","com.unity.entities":"1.3.0-exp.1","com.unity.collections":"2.5.0-exp.1","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"886d71ac765dda203ef7b195d03fb2bb952311ab","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.3.0-exp.1.tgz"}},"1.2.3":{"_upm":{"changelog":"### Changed\n\n* `IntegrityChecks` is now under `ProjectSettings` > `Physics` > `Unity Physics` > `Enable Integrity Checks`.\n* Updated entities packages dependencies"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"b5c143253934a13a1f275bef5ecc8dd1d494de5a"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"0e866f29be5f7742acc14fad89281f547835ef01"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.3","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.13","com.unity.entities":"1.2.3","com.unity.collections":"2.4.2","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"209732568b97884ee5944737a274cd6e17c8e085","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.3.tgz"}},"1.2.1":{"_upm":{"changelog":"### Changed\n\n* Updated Burst dependency to version 1.8.13\n* Updated entities packages dependencies"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"2078b29983ee0340a120e9aaff3664bd22b69083"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"6ecf7a215623cca37079c6f1a3e6f2f686c91721"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.13","com.unity.entities":"1.2.1","com.unity.collections":"2.4.1","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"760b5d6615554b1f442961572d6aef78ad21f395","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.1.tgz"}},"1.2.0":{"_upm":{"changelog":"### Fixed\n\n* Fix a number of memory leaks in the package and its test code.\n* Make sure that the `ColliderBlobCleanupSystem` does not dispose the same collider blob multiple times in Netcode environments, preventing a crash."},"type":"assets","unity":"2022.3","upmCi":{"footprint":"5892208842dd44376f40f54de23910589e038f4a"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"ea4236421d61011e37e71d22108c5e4e70cf71d7"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.0","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.12","com.unity.entities":"1.2.0","com.unity.collections":"2.4.0","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"8bd632fb037c13ddc1becf447875ad6a3c9d1ec6","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.0.tgz"}},"1.2.0-pre.12":{"_upm":{"changelog":"### Added\n\n* ScheduleUpdateBroadphase and UpdateBroadphaseImmediate to update the Broadphase instead of doing a full rebuild.\n* ScheduleUpdateMotionData and UpdateMotionDataImmediate to update the pre-existing MotionData without recreating them.\n* BuildPhysicsWorldData.CompleteInputDependency method to complete the InputDependency if necessary.\n* Simulaton.ResetSimulationContext to make it possible reset the current simulation context.\n\n### Changed\n\n* Updated Burst dependency to version 1.8.12\n\n### Fixed\n\n* Fixed errors caused by memory corruption when selecting mesh-based custom Physics Shape Authoring components in the editor.\n\n### Updated\n\n* Upgraded Test Framework version to 1.4.3"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"1ab75b01a6205ca35e900c14473a6a456ca865ca"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"1ae43e0525b8a09c7fe52ab40c762938a4937244"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.0-pre.12","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.12","com.unity.entities":"1.2.0-pre.12","com.unity.collections":"2.4.0-pre.5","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.4.3","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"8bbe1ca0f169b6b173a7363bfeee459c215a446d","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.0-pre.12.tgz"}},"1.2.0-pre.6":{"_upm":{"changelog":"### Changed\n\n* Promotion preparation"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"318b4ede24b3aa734131816c8d3c117bdfc48c85"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"c2136868e2bfbe78d7c68475d8ced6c623b4cb6d"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.0-pre.6","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.10","com.unity.entities":"1.2.0-pre.6","com.unity.collections":"2.4.0-pre.2","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.8","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"869298a8ed7deca69857214ad93b48f3d8b9d125","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.0-pre.6.tgz"}},"1.2.0-pre.4":{"_upm":{"changelog":"### Changed\n\n* Updated Burst dependency to 1.8.10"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"be3834d960450613a4a8af0b035a9bd11b40bf37"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"38c44b22a14cc4a35bc1b7a2f5ab1846208176d5"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.0-pre.4","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.10","com.unity.entities":"1.2.0-pre.4","com.unity.collections":"2.4.0-pre.2","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.8","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"47b84c0bb11ce5416168681835b1687dbcd35a8a","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.0-pre.4.tgz"}},"1.2.0-exp.3":{"_upm":{"changelog":"### Added\n\n* Added extension functions `PhysicsCollider.ToMesh()` and `Collider.ToMesh()` for the creation of `UnityEngine.Mesh` objects from colliders.\n* use of `PhysicsMaterial` instead of `PhysicMaterial` and `PhysicMaterialCombine` to `PhysicsMaterialCombine` API when the editor is newer than `2023.3`.\n* The `Layer Overrides` properties specified in `Collider` and `Rigidbody` authoring components are now baked into the `CollisionFilter` of the resultant Unity Physics colliders. For each individual `Collider` authoring component, the layer overrides on its `Rigidbody` and the collider itself are combined and together form the `CollidesWith` mask in the `CollisionFilter` of the baked collider. The collider collides with layers which are included, and does not collide with layers which are excluded. Furthermore, exclusions have precedence over inclusions.\n* `MassProperties.Scale` function allows uniformly scaling mass properties in a physically correct manner, assuming unit mass.\n\n### Changed\n\n* Update package `com.unity.mathematics` from `1.2.6` to `1.3.1` version.\n* Analytics API update to `SceneSimulationAnalytics.cs` file.\n* collider files renamed to `BoxCollider.cs`, `CapsuleCollider.cs`, `Collider.cs`, `MeshCollider.cs`, `SphereCollider.cs` and `TerrainCollider.cs`.\n* The `EnsureUniqueColliderSystem` now runs first in the `BeforePhysicsSystemGroup` instead of after the `AfterPhysicsSystemGroup`. A system that instantiates prefabs using unique colliders during runtime should run in the `BeforePhysicsSystemGroup` to avoid a bug where colliders would not be unique during prefab instantiation.\n* The minimum supported editor version is now 2022.3.11f1\n\n### Removed\n\n* `RayCastNode` and `ColliderCastNode`\n\n### Fixed\n\n* Prevent crash in debug display when exiting editor application."},"type":"assets","unity":"2022.3","upmCi":{"footprint":"6b3704d2bbf6280b83a28114ed6e86726cf7a23e"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"9bfd95fb576e8fa710c8544b6706bdd73e25afef"},"unityRelease":"11f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.2/manual/index.html","name":"com.unity.physics","version":"1.2.0-exp.3","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.8","com.unity.entities":"1.2.0-exp.3","com.unity.collections":"2.4.0-exp.2","com.unity.mathematics":"1.3.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.8","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"ff13226851a321891bb25948acab44965d7cc593","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.2.0-exp.3.tgz"}},"1.1.0-pre.3":{"_upm":{"changelog":"### Added\n\n* The `Physics Debug Display` component can now display colliders of type `TerrainCollider`.\n* The `Layer Overrides` properties specified in `Collider` and `Rigidbody` authoring components are now baked into the `CollisionFilter` of the resultant Unity Physics colliders. For each individual `Collider` authoring component, the layer overrides on its `Rigidbody` and the collider itself are combined and together form the `CollidesWith` mask in the `CollisionFilter` of the baked collider. The collider collides with layers which are included, and does not collide with layers which are excluded. Furthermore, exclusions have precedence over inclusions.\n* `MassProperties.Scale` function allows uniformly scaling mass properties in a physically correct manner, assuming unit mass.\n* `MassProperties.CreateSphere` function for creation of the mass properties of a sphere with the provided radius, assuming unit mass.\n\n### Changed\n\n* Significantly improved performance of `Physics Debug Display` through a reduced need for thread synchronization via batching of debug display data.\n* The `Physics Debug Display` now automatically resizes its debug draw data buffers dynamically to ensure all entities are drawn.\n* Game objects with built-in or custom collider authoring components that have a purely uniform scale at edit-time, will now have the scale carried over into their `LocalTransform` component's `Scale` property during entity baking. Thus far, any scale, including a purely uniform scale, was baked into the Unity Physics collider geometry instead and the corresponding entity's `LocalTransform.Scale` property was set to 1 rather than to the desired uniform scale value. This is no longer the case, and users can now expect to find the uniform edit-time scale they assign to their game objects also in the resultant, baked entities during run-time, making run-time modifications of already uniformly scaled objects much more intuitive and less cumbersome.\n* Rigid bodies baked from game objects which have any world-space scale or shear at edit-time can now be scaled at runtime using their `LocalTransform` component's `Scale` property. Previously, this was not possible. Runtime scaling using the `LocalTransform.Scale` property was only possible when the edit-time scale of the baked game object was identity, and no shear was present.\n* `Entity` references in `CompoundCollider` children are no longer automatically set during baking since these references are not guaranteed to be valid in the `World` after baking. Only those entity references that appear in components and buffers, such as the `PhysicsColliderKeyEntityPair` buffer, are always guaranteed to be valid. Note that the `PhysicsColliderKeyEntityPair` buffer is still present on entities which contain a baked compound collider. Via collider keys, this buffer provides a mapping between the child colliders and the original entities that they were in at bake time.\n\n### Fixed\n\n* Prevent race condition between the systems that produce the debug draw data and the display system that renders the data. This allows the debug data to be fully produced before the display system attempts to render it.\n* Fix draw of collider entities without `LocalToWorld` component when selecting `PostIntegration` in the Physics Debug Display.\n* Avoid leftover debug draw when switching scenes and new scene has no `Physics Debug Display`.\n* Mass properties debug display now correctly considers the rigid body scale, and correctly handles cases with unphysical inertia tensors.\n* Custom mass properties specified using the `Override Default Mass Distribution` option in the custom `Physics Body Authoring` component now work correctly even if no collider is present.\n* A rigid body's uniform scale value (`LocalTransform.Scale`) is now always considered correctly in the simulation. Previously, when the rigid body entity also contained a `PostTransformMatrix` component, its uniform scale was not applied to its collider and mass properties, leading to erroneous mass properties and missed collisions (if uniform scale > 1) or ghost collisions (if uniform scale < 1).\n* Collider debug display now correctly displays colliders with uniform scale other than 1 in accordance with their `LocalTransform` component's `Scale` value.\n* Collider debug display now correctly displays rigid body entities with `Parent` component."},"type":"assets","unity":"2022.3","upmCi":{"footprint":"c41e72edbed1817b7e834bdb19e87f014a0f5797"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"5edeb315aa3ca0d26060290a69660b2afdabe2ff"},"unityRelease":"0f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.1/manual/index.html","name":"com.unity.physics","version":"1.1.0-pre.3","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.8","com.unity.entities":"1.1.0-pre.3","com.unity.collections":"2.3.0-pre.3","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.8","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"52297d0e9282bf2925bf7fdc544cd0b48fb3c0ae","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.1.0-pre.3.tgz"}},"1.1.0-exp.1":{"_upm":{"changelog":"### Added\n\n* Tests for ensuring proper joint anchor and mass property baking\n* new demo scene (5m. Collider Modifications) demonstrating how to create colliders during runtime\n* Utility functions were added for the creation of MeshCollider blob assets from UnityEngine.Mesh, UnityEngine.MeshData and UnityEngine.MeshDataArray. These functions are located in the MeshCollider class as `MeshCollider.Create' variants with different function signatures.\n* Users can now verify if a collider blob is unique, and make it unique easily if required. The newly introduced `PhysicsCollider.IsUnique` property lets users check if a `PhysicsCollider` is unique and turn it into a unique collider if desired via the function `PhysicsCollider.MakeUnique()`. Making a collider unique with this function also takes care of the collider blob lifetime management and will automatically dispose it if it is no longer needed.\n* Added a custom entity inspector for the collider blob asset stored in the `PhysicsCollider` component. This inspector allows for two-way interaction with the collider. The displayed values update in accordance with the collider's latest runtime state, and the UI can be used in order to interact with the collider manually when it is unique (see `PhysicsCollider.IsUnique`). Among others, this lets users try out different material properties at runtime, such as friction and restitution, or modify the collider's size, local position or orientation.\n\n### Changed\n\n* Changed the `bool` flags in the `Physics Debug Display` authoring component for drawing colliders, collider edges and axis-aligned bounding boxes of colliders to an enum called `DisplayMode`. With the display mode you can now choose whether to draw these elements at the beginning of the simulation step or at the end of the simulation step after the rigid bodies have been integrated, meaning, they have been moved forward in time.\n* Convert SystemBase to ISystems.\n* Joint baking for built-in 3D physics joints has been improved, leading to the expected simulation results. Now, when the `Spring` and `Damping` properties in Configurable and Character Joints are both set to 0 for limits, a hard limit is modeled. This is equivalent to the behavior in built-in 3D physics. Also, the `Damping` parameter is now correctly converted from damping coefficient to the Unity Physics damping ratio for joints, yielding the correct damping force. Furthermore, joint baking now considers the scale of game objects. Anchor points are now affected by the scale accordingly.\n* The formula which converts the user-specified joint relaxation parameters (spring frequency and damping ratio) to the internal constraint regularization parameters (tau and damping) was rewritten as an optimized closed-form expression with constant time complexity. The regularization parameters can now be efficiently computed regardless of the chosen solver iteration count.\n* `PhysicsGraphicalSmoothing` has been added to `.WithAll<>()` from `.WithAllRW<>()` in the `SmoothedDynamicBodiesQuery` variable within `SmoothRigidBodiesGraphicalMotion.cs` system file.\n* Updating APIs to `GetScriptingDefineSymbols()` and `SetScriptingDefineSymbols()`.\n* Included ragdoll authoring in documentation\n* Prefab instances will now contain unique colliders if the \"force unique\" collider authoring option is used. This allows collider runtime modifications without manual collider blob cloning now also on prefab instances. Note that prefab instances that contain \"force unique\" colliders will be made unique only after the next physics system group update following the prefab instantiation. Until then, the `PhysicsCollider.IsUnique` property will be false. If users require a unique collider immediately after prefab instantiation for runtime collider modifications, they can safely use the new `PhysicsCollider.MakeUnique()` function immediately after instantiation.\n* Updated Burst dependency to version 1.8.8\n* The internal component `DrawComponent`, required by the `Physics Debug Display`, is now hidden in the hierarchy.\n\n### Deprecated\n\n* The `Constraint.DefaultSpringDamping` variable was deprecated. Use `Constraint.DefaultDampingRatio` instead. The same applies to the `Constraint.SpringDamping` property which was deprecated. Instead the new `Constraint.DampingRatio` property should be used.\n\n### Removed\n\n* Remove unused internal debug draw functionalities which were causing slowdowns during world initialization\n\n### Fixed\n\n* BuildCompoundCollidersBakingSystem no longer leaks memory when the world is disposed.\n* Convert SystemBase to ISystems\n* When using the built-in `Rigidbody` and `Collider` authoring components, the inertia tensor of the resultant rigid body in Unity Physics is now set correctly in all situations. Previously, in certain cases, the default inertia tensor was used.\n* A problem which prevented the solver to respect the user-specified joint spring frequency and damping ratios in certain cases has been fixed, enabling physically-plausible modeling of joints under all operating conditions.\n* Link to changelog in documentation now fixed\n* Physics Shape components with type Mesh now correctly only use the Custom Mesh for MeshCollider creation if specified rather than also incorrectly including the game object's render mesh and any render mesh found in the game object's children. The previous erroneous behavior could lead to significant performance problems in the narrow phase (contact creation) of the physics simulation group for affected meshes.\n* Updated documentation to reflect that the Built-In TerrainCollider is not yet supported by Unity Physics"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"742197017da611bedbebad5ba50b0c9395fa0a0b"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"c3274ed2015eeec85914d62bfbd32e39f0dd112b"},"unityRelease":"0f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.1/manual/index.html","name":"com.unity.physics","version":"1.1.0-exp.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# ECS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.8","com.unity.entities":"1.1.0-exp.1","com.unity.collections":"2.3.0-exp.1","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.8","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"0add896a7913e7dcb853a3481806575f1224b4a9","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.1.0-exp.1.tgz"}},"1.0.16":{"_upm":{"changelog":"### Changed\n\n* Updated Burst dependency to version 1.8.8\n\n### Fixed\n\n* Bugfix: The `AngularDamping` component of `RigidbodyAspect` is now writing to the correct value instead of to `LinearDamping`\n\n### Security"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"b22514900af455e8ec10caff22a04b4faf6c2e48"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"8f9a34fef643cca2b5f84470ac61c171c1831168"},"unityRelease":"0f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.16","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.8","com.unity.entities":"1.0.16","com.unity.collections":"2.1.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"16e1772795c21b50f0315c7d340d10d58f0177f9","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.16.tgz"}},"1.0.14":{"_upm":{"changelog":"### Added\n\n* Added support for overriding mass properties when baking `Rigidbody` authoring components. Now, when setting the `RigidBody.automaticCenterOfMass` or `RigidBody.automaticInertiaTensor` properties to false, the corresponding mass property data values are correctly baked into the Unity Physics rigid body entity and appear as expected in the entity's `PhysicsMass` component.\n\n### Changed\n\n* Updated Burst dependency to version 1.8.7"},"type":"assets","unity":"2022.3","upmCi":{"footprint":"68bef0b61c072996b5d866d6a757f78fa0d6efce"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"13433ff314ae6503bb855899b83d26a063650441"},"unityRelease":"0f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.14","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.7","com.unity.entities":"1.0.14","com.unity.collections":"2.1.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"ded9b663b122e28ec75995bed758a9d8c41b36a2","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.14.tgz"}},"1.0.11":{"_upm":{"changelog":"### Changed\n\n* Prevent spawning `ParallelSolverJobs` unnecessarily ahead of time, which was leading to a potentially high overhead in time consumption. Instead, schedule the right number of jobs for the dispatch pair phases created by the scheduler to prevent scheduling and processing overheads. This leads to speed-ups in the time consumed by jobs in the `SolveAndIntegrateSystem` specifically in cases with low to medium joint and contact counts.\n* The `PhysicsColliderKeyEntityPair` buffer is now added only when needed and its internal capacity of the buffer is set to zero, ensuring its content always lives outside of the chunk. This way, we don't unnecessarily increase the rigid body sizes in chunks, allowing for a larger number of rigid bodies in a single chunk, which improves performance.\n\n### Fixed\n\n* Fixed regression in accessibility of `PhysicsShapeAuthoring` API. The functions `GetCapsuleProperties()` and `SetCapsule()` were made internal by accident during the move of the custom physics authoring components from the package API to a package sample and are now public again."},"type":"assets","unity":"2022.2","upmCi":{"footprint":"a9a4878ec6b761534511107bc3cfc9ee023b7d25"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"81c21934f16a49fc5f826187f07aaea4728d63c3"},"unityRelease":"15f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.11","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.4","com.unity.entities":"1.0.11","com.unity.collections":"2.1.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"8959b60faaf3bde2788fa287eac1f7ef6bc29d4e","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.11.tgz"}},"1.0.10":{"_upm":{"changelog":"### Added\n\n* Added missing API documentation and tooltips.\n* preprocessors against performance tests package\n\n### Changed\n\n* Changed visibility of `BaseJointBaker` class. It is now internal.\n* Changed visibility of `ColliderGeometry` struct. It is now internal.\n* Changed visibility of `PrimitiveColliderGeometries` struct. It is now internal.\n\n### Fixed\n\n* The relative velocity in the angular velocity motor is now calculated correctly and the relative orientation between the two connected rigid bodies is correctly taken into account. This makes the motor work properly in all configurations.\n* Prevent issues with update order for `ModifyJointLimitsSystem` in netcode multiplayer use case in which the system could not be placed after the `PhysicsSystemGroup` since both were no longer in the same group."},"type":"asset","unity":"2022.2","upmCi":{"footprint":"cd27e809957826ef3e2ee8c6602ca8a4ec8dbfd9"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"464acdc5351df3c5deeb425d7aa31f4c7b20c0cf"},"unityRelease":"15f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.10","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.4","com.unity.entities":"1.0.10","com.unity.collections":"2.1.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"3c4f171337849639c7befc948f49c8886d12c161","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.10.tgz"}},"1.0.8":{"_upm":{"changelog":"### Added\n\n* Add `PhysicsWorldIndexAuthoring` component which allows specifying non-default world indices for bodies which are modeled using a `Rigidbody` component.\n\n### Changed\n\n* With the removal of the custom Unity Physics authoring experience, a behavior change has been introduced when mixing built-in physics authoring components with custom physics authoring components. It is now no longer supported to add built-in colliders, such as the Box Collider, to a rigid body created using the `PhysicsBodyAuthoring` component. The inverse however, adding `PhysicsShapeAuthoring` components to a rigid body created using the built-in `Rigidbody` component, is still supported.\n* Updated Burst version to 1.8.4\n\n### Removed\n\n* UpgradePhysicsData window has been removed.\n* The custom Unity Physics authoring experience, built around the `PhysicsBodyAuthoring` and `PhysicsShapeAuthoring` components, has been removed from the package and turned into a package sample. It is recommended to use the built-in physics authoring components instead, e.g., the `Rigidbody` and collider components. To continue using the custom authoring experience in your projects, simply import the _Custom Physics Authoring_ sample from the Unity Physics package into your project via the Package Manager window.\n* Dependency on com.unity.test-framework\n\n### Fixed\n\n* Colliders created from PhysicsShapeAuthoring components with the \"Force Unique\" flag set to true now are ensured to have unique collider blobs that are not shared across rigid bodies when they have identical properties, thus enabling runtime modification of individual colliders."},"type":"asset","unity":"2022.2","upmCi":{"footprint":"ce12a996e109b52cd29212f682a3090cb7109bba"},"samples":[{"path":"Samples~/CustomPhysicsAuthoring","importPath":"Authoring","description":"Provides a custom authoring experience for creating rigid bodies and colliders for Unity Physics.","displayName":"Custom Physics Authoring"}],"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"25dfb648cd0fabcf13fed46219e5fbe0fdabe4ac"},"unityRelease":"15f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.8","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.4","com.unity.entities":"1.0.8","com.unity.collections":"2.1.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"94d347e2dab74bae9da4ea376e90319fddd8290b","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.8.tgz"}},"1.0.0-pre.65":{"_upm":{"changelog":"### Changed\n\n* Updated Burst version in use to 1.8.3\n* Debug display systems now only update when the PhysicsDebugDisplayData component is present (e.g., through the PhysicsDebugDisplayAuthoring game object component) and are only created within the editor.\n\n### Fixed\n\n* Physics Debug Display for enabled Collider Edges now draws correctly if the collider scale is modified during runtime\n* Debug display systems no longer stall and instead execute their jobs asynchronously\n* Debug draw of collider faces and AABBs now account for uniform scaling of the rigid body\n* Rigidbody components that move in PlayMode will now correctly snap back to their original position when exiting PlayMode while the containing sub scene is open for editing. As part of the fix, the classic PhysX-based physics simulation is now temporarily and globally disabled while in PlayMode with an open sub scene that contains classic Rigidbody authoring components. The Unity Physics-based physics simulation is unaffected during that time."},"type":"asset","unity":"2022.2","upmCi":{"footprint":"f926c40e04cf9c7f48868ea9f3fbbec777ed971c"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"85530c484ef7afedc5b128081152ec5e1f6f30e2"},"unityRelease":"2f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.0-pre.65","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.3","com.unity.entities":"1.0.0-pre.65","com.unity.collections":"2.1.0-pre.18","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.2","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"7e26f3fae8730413132c564a25f09fa82b6ca0d7","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.0-pre.65.tgz"}},"1.0.0-pre.44":{"_upm":{"changelog":"### Added\n\n* legacy icons to the physics authoring components `PhysicsShape` and `PhysicsBody`.\n* Help icon now always points to latest version of documentation for physics authoring components\n* Unit tests for Motors\n* Unit tests for some Jacobian methods\n* Internal API to help with connecting bodyB to bodyA for joints/motor configuration\n\n### Changed\n\n* Added functions that allow you to set impulse event threshold on all constraint joints, or only one of them.\n* Replaced PhysicsTransformAspect with TransformAspect\n* Increased testing of position motor in Position Motor demo scene, and re-enabled Position Motor package test.\n* Cleanup and simplification of position motor joint code\n* Use of `TransformAspect.WorldPosition`, `TransformAspect.WorldRotation`, `TransformAspect.WorldScale` when using Transform_V2 instead of `TransformAspect.Position`, `TransformAspect.Rotation`, `TransformAspect.Scale`.\n* `BaseShapeBakingSystem` and `BuildCompoundCollidersBakingSystem` have been modified to use `IJobEntity` instead of `Entities.ForEach()`.\n\n### Removed\n\n* `Attributes.cs` script has been removed since the `com.unity.properties` package is part of the editor as a module.\n* the gap left due to the old references being removed on the .asmdef files.\n\n### Fixed\n\n* Fixed bug when an extra ConfigurableJoint constraint was created when baking a motored Configurable Joint\n* Fixed bug where target wasn't calculated correctly when baking a motored Configurable Joint\n* Duplicate component error when switching Smoothing type to anything but None in Physics Body\n* Immediately reset component in PhysicsShapeAuthoring's Reset() function to avoid sequential coupling issues\n* During conversion from Game Object physics joints to Unity Physics joints the joint's spring coefficient is correctly considered."},"type":"asset","unity":"2022.2","upmCi":{"footprint":"44edb1c704b64f6428efd638000b3212a30d111a"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"0e572178431e16c09c6c434c873bf0c60e52a5e9"},"unityRelease":"2f1","documentationUrl":"https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/index.html","name":"com.unity.physics","version":"1.0.0-pre.44","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.8.2","com.unity.entities":"1.0.0-pre.44","com.unity.collections":"2.1.0-pre.11","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.3.2","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"16f45dacad5093595d37cb5b49f5b74965b95c62","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.0-pre.44.tgz"}},"1.0.0-pre.15":{"type":"asset","unity":"2022.2","upmCi":{"footprint":"b32c4357d902bf1d1d3c7ae4c1dc3fcdab9708b4"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"82387d7cb4bc4aee07e94656ef8103860ef6ec55"},"unityRelease":"0f1","name":"com.unity.physics","version":"1.0.0-pre.15","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.7.4","com.unity.entities":"1.0.0-pre.15","com.unity.collections":"2.1.0-pre.2","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.33","com.unity.modules.jsonserialize":"1.0.0"},"dist":{"shasum":"046a6db47480ea929dfc95b7810396410cfbbefe","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.0-pre.15.tgz"}},"1.0.0-exp.12":{"type":"asset","unity":"2022.2","upmCi":{"footprint":"93ada97f758b8b9476acf054513aba31c5d4fc1b"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"3f0a7e39227bd97f1239a6505a9449425fecfe1e"},"unityRelease":"0b5","name":"com.unity.physics","version":"1.0.0-exp.12","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.70.0-preview.7","com.unity.burst":"1.7.3","com.unity.entities":"1.0.0-exp.12","com.unity.collections":"2.1.0-exp.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.33","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"39baa15b74f84d50f263f4c75890cc9075cb93a5","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.0-exp.12.tgz"}},"1.0.0-exp.8":{"type":"asset","unity":"2022.2","upmCi":{"footprint":"8a250b431c186752ddac1adf8cab37eb8a23f550"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"7f4180a58b7e1c75f6375bd73fb80bd99d195d4e"},"unityRelease":"0b5","name":"com.unity.physics","version":"1.0.0-exp.8","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.70.0-preview.7","com.unity.burst":"1.7.3","com.unity.entities":"1.0.0-exp.8","com.unity.collections":"2.1.0-exp.4","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.33","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"6dfe48f0c50cba04f73f1dc5f8d495fb513fdb33","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-1.0.0-exp.8.tgz"}},"0.51.1-preview.21":{"upm":{"changelog":"### Changed\n\n* Package Dependencies\n    * `com.unity.entities` to version `0.51.1`\n    * `com.unity.collections` to version `1.4.0`"},"type":"asset","unity":"2020.3","upmCi":{"footprint":"115883e4e465a771c5d27b7af39f4c04cc2f7d8b"},"repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"063a98897b40805f53b859bb426ce664229d0c00"},"unityRelease":"30f1","name":"com.unity.physics","version":"0.51.1-preview.21","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.6.6","com.unity.entities":"0.51.1-preview.21","com.unity.collections":"1.4.0","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.31","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.8.0-preview"},"dist":{"shasum":"371375df47e2c7daf95ceb447f05810e841f2c40","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.51.1-preview.21.tgz"}},"0.51.0-preview.32":{"_id":"com.unity.physics@0.51.0-preview.32","upm":{"changelog":"### Changed\n\n* Package Dependencies\n    * `com.unity.entities` to version `0.51.0`\n    * `com.unity.jobs` to version `0.51.0`\n    * `com.unity.mathematics` to version `1.2.6`\n    * `com.unity.collections` to version `1.3.0`\n\n### Fixed\n\n* `PhysicsShapeAuthoring.SetCylinder()` now takes into account provided geometry's side count."},"type":"asset","_from":"file:/tmp/com.unity.physics@0.51.0-preview.32-57m0qvhk.tgz","unity":"2020.3","upmCi":{"footprint":"468cc11072776930676dc6e1d9a672357cba0187"},"_resolved":"/tmp/com.unity.physics@0.51.0-preview.32-57m0qvhk.tgz","_integrity":"sha512-Pd6uv0j5ZE4tA9fi86JyqvlJhEbAtfbLfJq5luqoxYHHdcd6QnwkO0QnT9Ro0xYEWV3cRLq3JIrY1cqCOkbRCg==","repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"469d2b30300a7ff2c2b15f72ee8613e374c37b63"},"_npmVersion":"7.5.2","_nodeVersion":"12.22.5","unityRelease":"0f1","name":"com.unity.physics","version":"0.51.0-preview.32","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.51.0-preview.32","com.unity.burst":"1.6.6","com.unity.entities":"0.51.0-preview.32","com.unity.collections":"1.3.1","com.unity.mathematics":"1.2.6","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.31","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.8.0-preview"},"dist":{"shasum":"747a6af06a1d29b3bce49e64815c8dca28523261","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.51.0-preview.32.tgz"}},"0.50.0-preview.43":{"_id":"com.unity.physics@0.50.0-preview.43","upm":{"changelog":"### Changed\n\n* Upgraded com.unity.burst to 1.5.5\n* Adjusted code to remove obsolete APIs across all jobs inheriting IJobEntityBatch\n* Resources/ (used by Debug Draw) has been renamed DebugDisplayResources/ and now loads assets differently\n\n### Removed\n\n* All usages of PhysicsExclude from Demo and Runtime code.\n\n### Fixed\n\n* An issue with the rendering pipeline used for the package samples, which caused none of the samples to render post conversion\n* An issue with the materials present in the samples as their colors were no longer correct"},"type":"asset","_from":"file:/tmp/com.unity.physics@0.50.0-preview.43-9a68bp4b.tgz","unity":"2020.3","upmCi":{"footprint":"a61be3c0979266857d1a6f305b9cd9887975b955"},"_resolved":"/tmp/com.unity.physics@0.50.0-preview.43-9a68bp4b.tgz","_integrity":"sha512-Q45gxzMNIpJqGZibrVKBJJs6gA/v0vHbSjie2M/MyOkBAqAz/roJXZ4QUyBDuDtBbeWL8N/pJefOtvUCmyzE+A==","repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"5d835ee1e6a9eb3535465d21cf97e92c1d5164f7"},"_npmVersion":"7.5.2","_nodeVersion":"12.22.5","unityRelease":"0f1","name":"com.unity.physics","version":"0.50.0-preview.43","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.50.0-preview.9","com.unity.burst":"1.6.4","com.unity.entities":"0.50.1-preview.1","com.unity.collections":"1.2.3","com.unity.mathematics":"1.2.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.31","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"2a3cf97ae8d2d1bbe181b8f21f956921566188d9","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.50.0-preview.43.tgz"}},"0.50.0-preview.24":{"_id":"com.unity.physics@0.50.0-preview.24","type":"asset","_from":"file:/tmp/com.unity.physics@0.50.0-preview.24-nqr7an40.tgz","unity":"2020.3","upmCi":{"footprint":"862d9036a651373ee3f93341d2a5ba582a3794c4"},"_resolved":"/tmp/com.unity.physics@0.50.0-preview.24-nqr7an40.tgz","_integrity":"sha512-nvcLK9C/IUEgjFFuQN/6KupqIvQ8mvLU+xjcyYa4sH7A+pnCYVlxtSKXolBweUK6OW6nm2eNA0e+uFi952r6Ww==","repository":{"url":"https://github.cds.internal.unity3d.com/unity/dots.git","type":"git","revision":"8327688fcdee91448c8d4aa1ebbd5a4c1e665bef"},"_npmVersion":"7.5.2","_nodeVersion":"12.21.0","unityRelease":"0f1","name":"com.unity.physics","version":"0.50.0-preview.24","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.50.0-preview.8","com.unity.burst":"1.6.4","com.unity.entities":"0.50.0-preview.24","com.unity.collections":"1.2.3-pre.1","com.unity.mathematics":"1.2.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.31","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"9b56a76efaccac08993aa4b37ebd8d8ef61ba92a","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.50.0-preview.24.tgz"}},"0.6.0-preview.3":{"_id":"com.unity.physics@0.6.0-preview.3","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.6.0-preview.3.tgz","unity":"2020.1","upmCi":{"footprint":"41505f878ca975ba8f05c9c340e130919ba38f4f"},"readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"6ec1fba588df68052879913d6e4b14ed3714e90e"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"9f1","name":"com.unity.physics","version":"0.6.0-preview.3","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.8.0-preview.23","com.unity.burst":"1.4.1","com.unity.entities":"0.17.0-preview.41","com.unity.collections":"0.15.0-preview.21","com.unity.mathematics":"1.2.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"4bd806abe12c253ea1733bd6872f3a9f27bc457d","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.6.0-preview.3.tgz"}},"0.5.1-preview.2":{"_id":"com.unity.physics@0.5.1-preview.2","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.5.1-preview.2.tgz","unity":"2020.1","upmCi":{"footprint":"6aa0d96064e0f1ee08ef36d41390c8d321b27fb7"},"readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"107c985da0b8a22d04b85a01c17e3beedce0f5de"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.5.1-preview.2","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.7.0-preview.17","com.unity.burst":"1.3.7","com.unity.entities":"0.16.0-preview.21","com.unity.collections":"0.14.0-preview.16","com.unity.mathematics":"1.2.1","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.3.1-preview"},"dist":{"shasum":"2dd84d5e871308362484882fd41fcc08c30d71eb","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.5.1-preview.2.tgz"}},"0.5.0-preview.1":{"_id":"com.unity.physics@0.5.0-preview.1","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.5.0-preview.1.tgz","unity":"2020.1","upmCi":{"footprint":"f74f20ccad0d6542a202c4857d1d7c7e6f6a5d2f"},"readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"0118b4d43743d13a651f0fe9d3b4bcf016049226"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.5.0-preview.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.4.0-preview.18","com.unity.burst":"1.3.2","com.unity.entities":"0.13.0-preview.24","com.unity.collections":"0.11.0-preview.17","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.2.0-preview"},"dist":{"shasum":"8451103aa418daefebac790d0ff15972e34fa8db","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.5.0-preview.1.tgz"}},"0.4.1-preview":{"_id":"com.unity.physics@0.4.1-preview","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.4.1-preview.tgz","unity":"2019.4","upmCi":{"footprint":"2f8fb56eb4ad4246a7dc659443a1aae6d8c33a39"},"readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"a9f6d48a2d6e299db9ca86bea622c89d5949ded3"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.4.1-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.2.10-preview.12","com.unity.burst":"1.3.0","com.unity.entities":"0.11.1-preview.4","com.unity.collections":"0.9.0-preview.6","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.2.0-preview"},"dist":{"shasum":"05abc9f55cbe6c16146a2777bea3635473525aa0","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.4.1-preview.tgz"}},"0.4.0-preview.5":{"_id":"com.unity.physics@0.4.0-preview.5","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.4.0-preview.5.tgz","unity":"2019.4","upmCi":{"footprint":"124798d5660eca4c4a1793904df6b6d734f74500"},"readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"5ed6018ecef38639223ba6953aa064228dbbc514"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.4.0-preview.5","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.2.10-preview.12","com.unity.burst":"1.3.0","com.unity.entities":"0.11.1-preview.4","com.unity.collections":"0.9.0-preview.6","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"2.2.0-preview"},"dist":{"shasum":"5d72447ea9b2bea20ac00c3cdd7c399c699458f5","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.4.0-preview.5.tgz"}},"0.3.2-preview":{"_id":"com.unity.physics@0.3.2-preview","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.3.2-preview.tgz","unity":"2019.3","readme":"ERROR: No README data found!","homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"9eb0cfa9065d7b95780e053f617ad64f9a6497cf","footprint":"48e759031a85acc79150e8357003d878408a52a6"},"_npmVersion":"6.13.4","_nodeVersion":"12.16.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.3.2-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.2.8-preview.3","com.unity.burst":"1.3.0-preview.7","com.unity.entities":"0.9.0-preview.6","com.unity.collections":"0.7.1-preview.3","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"1.3.3-preview"},"dist":{"shasum":"2c626f96c2d6d0aac9de5d460fda14bef8a5ffd3","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.3.2-preview.tgz"}},"0.3.1-preview":{"_id":"com.unity.physics@0.3.1-preview","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.3.1-preview.tgz","unity":"2019.3","readme":"ERROR: No README data found!","_npmUser":{"name":"service-airflow-production@unity","email":"packman-ops+service-airflow-production@unity3d.com"},"homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"a2fb52d3307adbb1a653b1c4222b4128a1917d16","footprint":"2bdb68a6772f72a3e77d0847a57f967c71c81dde"},"_npmVersion":"6.13.4","_nodeVersion":"12.14.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.3.1-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.2.5-preview.20","com.unity.burst":"1.3.0-preview.7","com.unity.entities":"0.6.0-preview.24","com.unity.collections":"0.5.2-preview.8","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"1.3.3-preview"},"dist":{"shasum":"ada1caf72793480c3dfb1beb69af1b36d0e970b7","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.3.1-preview.tgz"}},"0.3.0-preview.1":{"_id":"com.unity.physics@0.3.0-preview.1","type":"asset","unity":"2019.3","scripts":{},"repository":{"url":"https://github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"d1277ad939018c50960e091767fd927b0f77db36","footprint":"4864760e2169d469cfb02f622a62160a5fbdbf86"},"unityRelease":"0f1","name":"com.unity.physics","version":"0.3.0-preview.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.jobs":"0.2.5-preview.20","com.unity.burst":"1.3.0-preview.3","com.unity.entities":"0.6.0-preview.24","com.unity.collections":"0.5.2-preview.8","com.unity.mathematics":"1.1.0","com.unity.modules.imgui":"1.0.0","com.unity.test-framework":"1.1.11","com.unity.modules.jsonserialize":"1.0.0","com.unity.test-framework.performance":"1.3.3-preview"},"dist":{"shasum":"d3a9e79a636cf300006cc3b5fa7d1df8e7f36d3f","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.3.0-preview.1.tgz"}},"0.2.5-preview.1":{"_id":"com.unity.physics@0.2.5-preview.1","bugs":{"url":"https://github.com/Unity-Technologies/Unity.Physics/issues"},"type":"asset","_from":"file:com.unity.physics-0.2.5-preview.1.tgz","unity":"2019.3","readme":"ERROR: No README data found!","_npmUser":{"name":"service-airflow-production@unity","email":"packman-ops+service-airflow-production@unity3d.com"},"homepage":"https://github.com/Unity-Technologies/Unity.Physics#readme","_resolved":"","_integrity":"","repository":{"url":"git+ssh://git@github.com/Unity-Technologies/Unity.Physics.git","type":"git","revision":"5c735806d614fc9aed242522bad5e059d71a908a"},"_npmVersion":"6.12.1","_nodeVersion":"12.13.1","unityRelease":"0f1","name":"com.unity.physics","version":"0.2.5-preview.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.entities":"0.3.0-preview.4","com.unity.test-framework.performance":"1.3.0-preview"},"dist":{"shasum":"ab89add3ad838fb4c956418873ac97575ef75d72","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.5-preview.1.tgz"}},"0.2.5-preview":{"_id":"com.unity.physics@0.2.5-preview","type":"asset","unity":"2019.3","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"91efa6ed53f199db529372326e5847133736915a"},"unityRelease":"0f1","name":"com.unity.physics","version":"0.2.5-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library.\n\nBuilt on top of the Unity C# DOTS framework, Unity Physics is network-ready, completely customizable, and built for performance out of the box. Whether you're building the next mobile hit or a new networked multiplayer console experience, Unity Physics leverages the Burst compiler and Job system to scale across a range of hardware.\n\nUnity Physics is currently in preview, and is compatible with Unity 2019.3 and newer.","keywords":["unity","physics"],"dependencies":{"com.unity.entities":"0.3.0-preview.4","com.unity.test-framework.performance":"1.3.0-preview"},"dist":{"shasum":"2eec835907a59d04f8dad6015e12ef5ae9a3493f","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.5-preview.tgz"}},"0.2.4-preview":{"_id":"com.unity.physics@0.2.4-preview","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"ce0179b7dc93da3591848c0a5eec740d5b394f95"},"unityRelease":"10f1","name":"com.unity.physics","version":"0.2.4-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.1.2","com.unity.entities":"0.1.1-preview","com.unity.test-framework.performance":"1.0.9-preview"},"dist":{"shasum":"d69c6693b991a11feeb857e0ed092f0fb0297560","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.4-preview.tgz"}},"0.2.3-preview":{"_id":"com.unity.physics@0.2.3-preview","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"679fd91f5a7df6e1d83eb7a5b00a38029895a9eb"},"unityRelease":"10f1","name":"com.unity.physics","version":"0.2.3-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.1.2","com.unity.entities":"0.0.12-preview.33","com.unity.test-framework.performance":"1.0.9-preview"},"dist":{"shasum":"75fab5db0a6975aae21880e5eda8eeb9ecdba301","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.3-preview.tgz"}},"0.2.2-preview":{"_id":"com.unity.physics@0.2.2-preview","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"33497d24f80bea76491bc4b3ebed2e210279b707"},"unityRelease":"10f1","name":"com.unity.physics","version":"0.2.2-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.1.2","com.unity.entities":"0.0.12-preview.33","com.unity.test-framework.performance":"1.0.9-preview"},"dist":{"shasum":"05b72f551f75a71a0112527c4167de1e31e0e3bb","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.2-preview.tgz"}},"0.2.0-preview":{"_id":"com.unity.physics@0.2.0-preview","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"85348034e0c2fb50552152528774b421994a0474"},"unityRelease":"10f1","name":"com.unity.physics","version":"0.2.0-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.1.1","com.unity.entities":"0.0.12-preview.33","com.unity.test-framework.performance":"1.0.9-preview"},"dist":{"shasum":"a40caae40e07731c845f77c41b6a443ab6b73128","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.2.0-preview.tgz"}},"0.1.0-preview":{"_id":"com.unity.physics@0.1.0-preview","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"d1fc1f12be8162fbe740ae913996f28f626c46cd"},"name":"com.unity.physics","version":"0.1.0-preview","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.0.4","com.unity.entities":"0.0.12-preview.33","com.unity.test-framework.performance":"1.0.9-preview"},"dist":{"shasum":"d3305925af07d79e347dad39bec41ae84549c20b","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.1.0-preview.tgz"}},"0.0.2-preview.1":{"_id":"com.unity.physics@0.0.2-preview.1","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"e458f15c702bce94eaa60f50d7f14213f5371cc8"},"name":"com.unity.physics","version":"0.0.2-preview.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.entities":"0.0.12-preview.30","com.unity.test-framework.performance":"1.0.6-preview"},"dist":{"shasum":"f565ce0b806fe8a8737e95ee13d5edd996413477","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.0.2-preview.1.tgz"}},"0.0.1-preview.1":{"_id":"com.unity.physics@0.0.1-preview.1","unity":"2019.1","scripts":{},"category":"Unity","repository":{"url":"git@github.com:Unity-Technologies/Unity.Physics.git","type":"git","revision":"a2c3c11a0e2292b084fe133eef90a30c8f41af7d"},"name":"com.unity.physics","version":"0.0.1-preview.1","displayName":"Unity Physics","description":"Unity's C# stateless physics library. This package is still in experimental phase.","keywords":["unity","physics"],"dependencies":{"com.unity.burst":"1.0.0-preview.6","com.unity.entities":"0.0.12-preview.29","com.unity.test-framework.performance":"1.0.6-preview"},"dist":{"shasum":"2bd0d46c19b27fa56d7ab20cec1246d39e889af7","tarball":"https://download.packages.unity.com/com.unity.physics/-/com.unity.physics-0.0.1-preview.1.tgz"}}},"time":{"1.3.10":"2025-02-24T13:23:57.235Z","1.3.9":"2025-01-22T13:08:43.657Z","1.3.8":"2024-12-03T10:03:15.930Z","1.3.5":"2024-10-14T16:43:26.145Z","1.3.2":"2024-09-17T00:04:41.781Z","1.2.4":"2024-08-15T11:20:44.000Z","1.3.0-pre.4":"2024-07-18T11:50:54.000Z","1.3.0-exp.1":"2024-06-17T09:15:20.000Z","1.2.3":"2024-06-05T16:16:13.000Z","1.2.1":"2024-05-02T09:18:20.000Z","1.2.0":"2024-03-26T13:41:10.000Z","1.2.0-pre.12":"2024-02-28T10:31:40.000Z","1.2.0-pre.6":"2023-12-15T14:21:31.000Z","1.2.0-pre.4":"2023-12-04T14:49:03.000Z","1.2.0-exp.3":"2023-11-14T17:42:49.000Z","1.1.0-pre.3":"2023-11-08T19:28:39.000Z","1.1.0-exp.1":"2023-09-20T14:42:20.000Z","1.0.16":"2023-09-13T11:26:45.000Z","1.0.14":"2023-08-10T08:45:07.000Z","1.0.11":"2023-06-21T08:41:25.000Z","1.0.10":"2023-05-25T14:09:09.000Z","1.0.8":"2023-05-11T16:09:01.000Z","1.0.0-pre.65":"2023-03-22T17:32:23.000Z","1.0.0-pre.44":"2023-02-16T16:52:48.000Z","1.0.0-pre.15":"2022-11-23T17:30:49.000Z","1.0.0-exp.12":"2022-10-26T16:31:20.000Z","1.0.0-exp.8":"2022-09-27T16:35:05.000Z","0.51.1-preview.21":"2022-08-02T15:11:06.000Z","0.51.0-preview.32":"2022-06-15T17:53:59.000Z","0.50.0-preview.43":"2022-04-26T12:17:08.000Z","0.50.0-preview.24":"2022-03-16T10:13:20.000Z","0.6.0-preview.3":"2021-01-22T16:59:17.000Z","0.5.1-preview.2":"2020-10-29T22:44:20.000Z","0.5.0-preview.1":"2020-09-17T18:56:57.000Z","0.4.1-preview":"2020-07-27T21:33:14.000Z","0.4.0-preview.5":"2020-06-18T13:56:46.000Z","0.3.2-preview":"2020-04-16T22:44:06.000Z","0.3.1-preview":"2020-03-19T18:24:40.000Z","0.3.0-preview.1":"2020-03-11T16:03:45.000Z","0.2.5-preview.1":"2019-12-06T23:59:04.000Z","0.2.5-preview":"2019-12-04T13:07:52.000Z","0.2.4-preview":"2019-09-20T17:03:08.000Z","0.2.3-preview":"2019-09-20T17:03:02.000Z","0.2.2-preview":"2019-09-06T16:02:51.000Z","0.2.0-preview":"2019-07-19T08:02:55.000Z","0.1.0-preview":"2019-05-31T17:02:03.000Z","0.0.2-preview.1":"2019-04-11T16:01:55.000Z","0.0.1-preview.1":"2019-04-03T12:08:32.000Z"},"dist-tags":{"latest":"1.3.10"},"etag":"\"1a293-IFDeIjeOtMDoW3GFpuzG+KF4myM\""}